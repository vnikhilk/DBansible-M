
- name: install-home-db | Extract files
  unarchive:
      src={{ oracle_stage }}/{{ item[0].filename }}
      dest={{ oracle_home_db }}
      copy=no
      creates="{{ oracle_home_db }}/{{ item[0].creates}}"
  with_nested:
    - "{{oracle_sw_image_db}}"
    - "{{db_homes_installed}}"
  become: yes
  become_user: "{{ oracle_user }}"
  run_once: "{{ configure_cluster}}"
  when: item[0].version == db_homes_config[item[1].home]['version'] and item[1].state|lower == 'present' and oracle_sw_copy and oracle_home_db not in existing_dbhome.stdout_lines
  tags:
    - oradbswunpack

- name: install-home-db | Extract files (from remote location)
  unarchive:
      src={{ oracle_stage_remote }}/{{ item[0].filename }}
      dest={{ oracle_home_db }}
      copy=no
      creates="{{ oracle_home_db }}/{{ item[0].creates}}"
  with_nested:
    - "{{oracle_sw_image_db}}"
    - "{{db_homes_installed}}"
  become: yes
  become_user: "{{ oracle_user }}"
  run_once: "{{ configure_cluster}}"
  when: item[0].version == db_homes_config[item[1].home]['version'] and item[1].state|lower == 'present'  and not oracle_sw_copy and oracle_home_db not in existing_dbhome.stdout_lines
  tags:
    - oradbswunpack

- name: install-home-db | Install Oracle Database Server
  shell: "{{ oracle_home_db }}/runInstaller -responseFile {{ oracle_rsp_stage }}/{{ oracle_db_responsefile }} -ignorePrereq -silent -waitforcompletion"
  become: yes
  become_user: "{{ oracle_user }}"
  run_once: "{{ configure_cluster}}"
  when: oracle_home_db not in existing_dbhome.stdout_lines
  tags:
    - oradbinstall
  register: oradbinstall
  failed_when: oradbinstall.rc not in [0,6]

- name: Get files in a folder
  find:
    paths: "{{ oracle_inventory_loc }}/logs/"
    patterns: "installActions*.log"
  register: log_files

- name: db checklist status file upload for RDBMS Install
  import_role:
    name: dbaas_api_services
    tasks_from: db_checklist_status_file.yml
  vars:
    task_key: "{{ ansible_hostname }}"
    task_area: "RDBMS Software Install"
    task_id: "{{ ticket_ref }}"
    task_status: "Upload RDBMS Install Log"
    task_message: "RDBMS Install Log {{ ansible_hostname }} "
    file_mimetype: "text/plain"
    record_type: "file_upload"
    standard_task_id: "{{ standard_task_id }}"
    logfile_path:  "{{ log_files.files | sort(attribute='mtime',reverse=true) | first | json_query('path') }}"
  when: inventory_hostname == master_node
  tags:
  - apex_api

- debug: var=oradbinstall.stdout_lines
  run_once: "{{ configure_cluster}}"
  when: oracle_home_db not in existing_dbhome.stdout_lines and oradbinstall.changed
  tags:
   - oradbinstall
  ignore_errors: true
